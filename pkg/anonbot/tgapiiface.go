// DON'T EDIT: This code generated by ifacemaker. See Makefile codegen command!

package anonbot

import (
	"net/url"

	. "github.com/go-telegram-bot-api/telegram-bot-api"
)

// UCTelegramBotAPI iterface for telegram bot api
type UCTelegramBotAPI interface {
	// MakeRequest makes a request to a specific endpoint with our token.
	MakeRequest(endpoint string, params url.Values) (APIResponse, error)
	// UploadFile makes a request to the API with a file.
	//
	// Requires the parameter to hold the file not be in the params.
	// File should be a string to a file path, a FileBytes struct,
	// a FileReader struct, or a url.URL.
	//
	// Note that if your FileReader has a size set to -1, it will read
	// the file into memory to calculate a size.
	UploadFile(endpoint string, params map[string]string, fieldname string, file interface{}) (APIResponse, error)
	// GetFileDirectURL returns direct URL to file
	//
	// It requires the FileID.
	GetFileDirectURL(fileID string) (string, error)
	// GetMe fetches the currently authenticated bot.
	//
	// This method is called upon creation to validate the token,
	// and so you may get this data from BotAPI.Self without the need for
	// another request.
	GetMe() (User, error)
	// IsMessageToMe returns true if message directed to this bot.
	//
	// It requires the Message.
	IsMessageToMe(message Message) bool
	// Send will send a Chattable item to Telegram.
	//
	// It requires the Chattable to send.
	Send(c Chattable) (Message, error)
	// GetUserProfilePhotos gets a user's profile photos.
	//
	// It requires UserID.
	// Offset and Limit are optional.
	GetUserProfilePhotos(config UserProfilePhotosConfig) (UserProfilePhotos, error)
	// GetFile returns a File which can download a file from Telegram.
	//
	// Requires FileID.
	GetFile(config FileConfig) (File, error)
	// GetUpdates fetches updates.
	// If a WebHook is set, this will not return any data!
	//
	// Offset, Limit, and Timeout are optional.
	// To avoid stale items, set Offset to one higher than the previous item.
	// Set Timeout to a large number to reduce requests so you can get updates
	// instantly instead of having to wait between requests.
	GetUpdates(config UpdateConfig) ([]Update, error)
	// RemoveWebhook unsets the webhook.
	RemoveWebhook() (APIResponse, error)
	// SetWebhook sets a webhook.
	//
	// If this is set, GetUpdates will not get any data!
	//
	// If you do not have a legitimate TLS certificate, you need to include
	// your self signed certificate with the config.
	SetWebhook(config WebhookConfig) (APIResponse, error)
	// GetWebhookInfo allows you to fetch information about a webhook and if
	// one currently is set, along with pending update count and error messages.
	GetWebhookInfo() (WebhookInfo, error)
	// GetUpdatesChan starts and returns a channel for getting updates.
	GetUpdatesChan(config UpdateConfig) (UpdatesChannel, error)
	// StopReceivingUpdates stops the go routine which receives updates
	StopReceivingUpdates()
	// ListenForWebhook registers a http handler for a webhook.
	ListenForWebhook(pattern string) UpdatesChannel
	// AnswerInlineQuery sends a response to an inline query.
	//
	// Note that you must respond to an inline query within 30 seconds.
	AnswerInlineQuery(config InlineConfig) (APIResponse, error)
	// AnswerCallbackQuery sends a response to an inline query callback.
	AnswerCallbackQuery(config CallbackConfig) (APIResponse, error)
	// KickChatMember kicks a user from a chat. Note that this only will work
	// in supergroups, and requires the bot to be an admin. Also note they
	// will be unable to rejoin until they are unbanned.
	KickChatMember(config KickChatMemberConfig) (APIResponse, error)
	// LeaveChat makes the bot leave the chat.
	LeaveChat(config ChatConfig) (APIResponse, error)
	// GetChat gets information about a chat.
	GetChat(config ChatConfig) (Chat, error)
	// GetChatAdministrators gets a list of administrators in the chat.
	//
	// If none have been appointed, only the creator will be returned.
	// Bots are not shown, even if they are an administrator.
	GetChatAdministrators(config ChatConfig) ([]ChatMember, error)
	// GetChatMembersCount gets the number of users in a chat.
	GetChatMembersCount(config ChatConfig) (int, error)
	// GetChatMember gets a specific chat member.
	GetChatMember(config ChatConfigWithUser) (ChatMember, error)
	// UnbanChatMember unbans a user from a chat. Note that this only will work
	// in supergroups and channels, and requires the bot to be an admin.
	UnbanChatMember(config ChatMemberConfig) (APIResponse, error)
	// RestrictChatMember to restrict a user in a supergroup. The bot must be an
	//administrator in the supergroup for this to work and must have the
	//appropriate admin rights. Pass True for all boolean parameters to lift
	//restrictions from a user. Returns True on success.
	RestrictChatMember(config RestrictChatMemberConfig) (APIResponse, error)
	// PromoteChatMember add admin rights to user
	PromoteChatMember(config PromoteChatMemberConfig) (APIResponse, error)
	// GetGameHighScores allows you to get the high scores for a game.
	GetGameHighScores(config GetGameHighScoresConfig) ([]GameHighScore, error)
	// AnswerShippingQuery allows you to reply to Update with shipping_query parameter.
	AnswerShippingQuery(config ShippingConfig) (APIResponse, error)
	// AnswerPreCheckoutQuery allows you to reply to Update with pre_checkout_query.
	AnswerPreCheckoutQuery(config PreCheckoutConfig) (APIResponse, error)
	// DeleteMessage deletes a message in a chat
	DeleteMessage(config DeleteMessageConfig) (APIResponse, error)
	// GetInviteLink get InviteLink for a chat
	GetInviteLink(config ChatConfig) (string, error)
	// PinChatMessage pin message in supergroup
	PinChatMessage(config PinChatMessageConfig) (APIResponse, error)
	// UnpinChatMessage unpin message in supergroup
	UnpinChatMessage(config UnpinChatMessageConfig) (APIResponse, error)
	// SetChatTitle change title of chat.
	SetChatTitle(config SetChatTitleConfig) (APIResponse, error)
	// SetChatDescription change description of chat.
	SetChatDescription(config SetChatDescriptionConfig) (APIResponse, error)
	// SetChatPhoto change photo of chat.
	SetChatPhoto(config SetChatPhotoConfig) (APIResponse, error)
	// DeleteChatPhoto delete photo of chat.
	DeleteChatPhoto(config DeleteChatPhotoConfig) (APIResponse, error)
}
